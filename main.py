import json
from pathlib import Path
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio

TOKEN = "8322042811:AAHzdQ-XFQvopNDSWXqe8zjeuvUjO0FH0ug"
DATA_FILE = Path("data.json")
CHANNEL_USERNAME = "@rewokayo"  # ‚Üê —É–∫–∞–∂–∏ username —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
START_POINTS = 1000
BONUS_POINTS = 1000
BONUS_COOLDOWN_MINUTES = 60  # –±–æ–Ω—É—Å —Ä–∞–∑ –≤ —á–∞—Å

# –ö—ç—à username ‚Üí user_id
usernames_cache = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
if DATA_FILE.exists():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        users_data = json.load(f)
else:
    users_data = {}

# --- —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON ---
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

def get_username_map():
    return users_data.setdefault("usernames", {})

def save_username(user, chat_id=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º username (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –∏ user_id –≤ –∫—ç—à –∏ JSON.
       –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
    if user.username:
        uname = user.username.lower()
        usernames_cache[uname] = user.id
        get_username_map()[uname] = user.id

    if chat_id:
        chat_data = users_data.setdefault(str(chat_id), {})
        points_data = chat_data.setdefault("points", {})
        if str(user.id) not in points_data:
            points_data[str(user.id)] = START_POINTS

    save_data()

def load_username_cache():
    usernames = users_data.get("usernames", {})
    usernames_cache.update(usernames)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_username_cache()

# --- —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—á–∫–æ–≤ –∏ –±–æ–Ω—É—Å–æ–≤ ---
def get_user_points(chat_id, user_id):
    return users_data.get(str(chat_id), {}).get("points", {}).get(str(user_id), START_POINTS)

def update_user_points(chat_id, user_id, points):
    chat_data = users_data.setdefault(str(chat_id), {})
    points_data = chat_data.setdefault("points", {})
    points_data[str(user_id)] = get_user_points(chat_id, user_id) + points
    save_data()

def get_last_bonus_time(chat_id, user_id):
    return users_data.get(str(chat_id), {}).get("bonus_time", {}).get(str(user_id))

def set_last_bonus_time(chat_id, user_id):
    chat_data = users_data.setdefault(str(chat_id), {})
    bonus_data = chat_data.setdefault("bonus_time", {})
    bonus_data[str(user_id)] = datetime.now().isoformat()
    save_data()

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "üí∞ !–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üé∞ !–¥—ç–ø <—Å—Ç–∞–≤–∫–∞> ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: !–¥—ç–ø 100)\n"
        "üéÅ !–±–æ–Ω—É—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "üí∏ !–¥–∞—Ç—å @–ª–æ–≥–∏–Ω 100 ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—á–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)
    points = get_user_points(chat_id, user.id)
    await update.message.reply_text(f"–£ —Ç–µ–±—è {points} –æ—á–∫–æ–≤ üéØ")

async def dep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)
    points = get_user_points(chat_id, user.id)

    message_text = update.message.text.strip().split()
    if len(message_text) > 1:
        try:
            bet = int(message_text[1])
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ !–¥—ç–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä: !–¥—ç–ø 100")
            return
    else:
        bet = 10

    if bet <= 0:
        await update.message.reply_text("üòí –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    if points < bet:
        await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet} üí∏. –ë–∞–ª–∞–Ω—Å: {points}")
        return

    update_user_points(chat_id, user.id, -bet)
    sent = await update.message.reply_dice(emoji="üé∞")
    await asyncio.sleep(2)
    dice_value = sent.dice.value

    multiplier = 0
    if dice_value in [1, 22, 43]:
        multiplier = 10
    elif dice_value == 64:
        multiplier = 100
    elif dice_value in [16, 32, 48]:
        multiplier = 5

    if multiplier > 0:
        reward = bet * multiplier
        update_user_points(chat_id, user.id, reward)
        await update.message.reply_text(
            f"üéâ –ó–∞–Ω–æ—Å! –ú–Ω–æ–∂–∏—Ç–µ–ª—å √ó{multiplier}, –≤—ã–∏–≥—Ä—ã—à {reward} –æ—á–∫–æ–≤!\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user.id)}"
        )
    else:
        await update.message.reply_text(
            f"üé∞ –ù–µ –ø–æ–≤–µ–∑–ª–æ... –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –æ—á–∫–æ–≤.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user.id)}"
        )

async def bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)

    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user.id)
        if member.status in ["left", "kicked"]:
            await update.message.reply_text(
                f"‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}. –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!"
            )
            return
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞."
        )
        print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", e)
        return

    last_bonus_time = get_last_bonus_time(chat_id, user.id)
    if last_bonus_time:
        last_time = datetime.fromisoformat(last_bonus_time)
        if datetime.now() - last_time < timedelta(minutes=BONUS_COOLDOWN_MINUTES):
            remaining = timedelta(minutes=BONUS_COOLDOWN_MINUTES) - (datetime.now() - last_time)
            minutes_left = int(remaining.total_seconds() // 60)
            seconds_left = int(remaining.total_seconds() % 60)
            await update.message.reply_text(
                f"‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫."
            )
            return

    update_user_points(chat_id, user.id, BONUS_POINTS)
    set_last_bonus_time(chat_id, user.id)
    await update.message.reply_text(
        f"üéÅ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω! +{BONUS_POINTS} –æ—á–∫–æ–≤.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user.id)}"
    )

async def give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)

    message_text = update.message.text.strip().split()
    if len(message_text) < 3:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: !–¥–∞—Ç—å @–ª–æ–≥–∏–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return

    username = message_text[1].lstrip("@").lower()
    try:
        amount = int(message_text[2])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏")
        return

    if username not in usernames_cache:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    target_id = usernames_cache[username]
    sender_points = get_user_points(chat_id, user.id)
    if amount > sender_points:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –ë–∞–ª–∞–Ω—Å: {sender_points}")
        return

    update_user_points(chat_id, user.id, -amount)
    update_user_points(chat_id, target_id, amount)
    await update.message.reply_text(f"üí∏ –¢—ã –ø–µ—Ä–µ–¥–∞–ª {amount} –æ—á–∫–æ–≤ @{username} ‚úÖ")

# --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.from_user is None:
        return

    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    text = update.message.text.lower()
    if text.startswith("!–±–∞–ª–∞–Ω—Å"):
        await balance(update, context)
    elif text.startswith("!–¥—ç–ø"):
        await dep(update, context)
    elif text.startswith("!–±–æ–Ω—É—Å"):
        await bonus(update, context)
    elif text.startswith("!–¥–∞—Ç—å"):
        await give(update, context)

# --- –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)
