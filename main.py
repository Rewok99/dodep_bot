import json
from pathlib import Path
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio

TOKEN = "8322042811:AAHzdQ-XFQvopNDSWXqe8zjeuvUjO0FH0ug"
DATA_FILE = Path("data.json")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
if DATA_FILE.exists():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        users_data = json.load(f)
else:
    users_data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

# –ù–∞—á–∞–ª—å–Ω—ã–µ –æ—á–∫–∏
START_POINTS = 1000

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!–°–æ—Å–∞–ª? –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: !–¥—ç–ø –∏ !–±–∞–ª–∞–Ω—Å.")

def get_user_points(chat_id, user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
    return users_data.get(str(chat_id), {}).get(str(user_id), START_POINTS)

def update_user_points(chat_id, user_id, points):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ"""
    chat_data = users_data.setdefault(str(chat_id), {})
    chat_data[str(user_id)] = get_user_points(chat_id, user_id) + points
    save_data()



async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    points = get_user_points(chat_id, user_id)
    await update.message.reply_text(f"–£ —Ç–µ–±—è {points} –æ—á–∫–æ–≤ üéØ")

async def dep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    points = get_user_points(chat_id, user_id)

    if points <= 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—á–∫–æ–≤ üò¢ –ú–æ–ª–∏—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª—é, –º–æ–∂–µ—Ç –≤—ã–¥–∞—Å—Ç)")
        return

    if points < 10:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üòî, –¥–æ–¥–µ–ø–∞ –Ω–µ –±—É–¥–µ—Ç...")
        return

    # –°–Ω–∏–º–∞–µ–º 10 –æ—á–∫–æ–≤
    update_user_points(chat_id, user_id, -10)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º üé∞ (slot machine)
    sent = await update.message.reply_dice(emoji="üé∞")
    
    await asyncio.sleep(2)  # –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    dice_value = sent.dice.value

    reward = 0
    if dice_value in [1, 22, 43]:
        reward = 100
    elif dice_value == 64:
        reward = 1000
    elif dice_value in [16, 32, 48]:
        reward = 10

    if reward > 0:
        update_user_points(chat_id, user_id, reward)
        await update.message.reply_text(
            f"üéâ –° –∑–∞–Ω–æ—Å–æ–º {reward} –æ—á–∫–æ–≤! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user_id)}"
        )
    else:
        await update.message.reply_text(
            f"–ü—Ä–æ–µ–±–∞–ª–∏üò¢! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user_id)}"
        )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.from_user is None:
        return

    text = update.message.text.lower()
    if text == "!–±–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "!–¥—ç–ø":
        await dep(update, context)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
