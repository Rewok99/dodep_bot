import json
from pathlib import Path
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio

TOKEN = "8322042811:AAHzdQ-XFQvopNDSWXqe8zjeuvUjO0FH0ug"
DATA_FILE = Path("data.json")
CHANNEL_USERNAME = "@rewokayo"  # ‚Üê —É–∫–∞–∂–∏ username —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä @mychannel
START_POINTS = 1000
BONUS_POINTS = 1000
BONUS_COOLDOWN_MINUTES = 60  # —Ç–µ–ø–µ—Ä—å –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑ –≤ 60 –º–∏–Ω—É—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
if DATA_FILE.exists():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        users_data = json.load(f)
else:
    users_data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "üí∞ !–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üé∞ !–¥—ç–ø ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç\n"
        "üéÅ !–±–æ–Ω—É—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—Ä–∞–∑ –≤ —á–∞—Å)"
    )

def get_user_points(chat_id, user_id):
    return users_data.get(str(chat_id), {}).get("points", {}).get(str(user_id), START_POINTS)

def update_user_points(chat_id, user_id, points):
    chat_data = users_data.setdefault(str(chat_id), {})
    points_data = chat_data.setdefault("points", {})
    points_data[str(user_id)] = get_user_points(chat_id, user_id) + points
    save_data()

def get_last_bonus_time(chat_id, user_id):
    return users_data.get(str(chat_id), {}).get("bonus_time", {}).get(str(user_id))

def set_last_bonus_time(chat_id, user_id):
    chat_data = users_data.setdefault(str(chat_id), {})
    bonus_data = chat_data.setdefault("bonus_time", {})
    bonus_data[str(user_id)] = datetime.now().isoformat()
    save_data()

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    points = get_user_points(chat_id, user_id)
    await update.message.reply_text(f"–£ —Ç–µ–±—è {points} –æ—á–∫–æ–≤ üéØ")

async def dep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    points = get_user_points(chat_id, user_id)

    if points <= 0:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—á–∫–æ–≤ üò¢ –ú–æ–ª–∏—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª—é, –º–æ–∂–µ—Ç –≤—ã–¥–∞—Å—Ç)")
        return

    if points < 10:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ üòî, –¥–æ–¥–µ–ø–∞ –Ω–µ –±—É–¥–µ—Ç...")
        return

    update_user_points(chat_id, user_id, -10)

    sent = await update.message.reply_dice(emoji="üé∞")
    await asyncio.sleep(2)

    dice_value = sent.dice.value
    reward = 0
    if dice_value in [1, 22, 43]:
        reward = 100
    elif dice_value == 64:
        reward = 1000
    elif dice_value in [16, 32, 48]:
        reward = 10

    if reward > 0:
        update_user_points(chat_id, user_id, reward)
        await update.message.reply_text(
            f"üéâ –° –∑–∞–Ω–æ—Å–æ–º {reward} –æ—á–∫–æ–≤! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user_id)}"
        )
    else:
        await update.message.reply_text(
            f"–ü—Ä–æ–µ–±–∞–ª–∏üò¢! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user_id)}"
        )

async def bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id

    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ["left", "kicked"]:
            await update.message.reply_text(
                f"‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}. –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!"
            )
            return
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞."
        )
        print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", e)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    last_bonus_time = get_last_bonus_time(chat_id, user_id)
    if last_bonus_time:
        last_time = datetime.fromisoformat(last_bonus_time)
        if datetime.now() - last_time < timedelta(minutes=BONUS_COOLDOWN_MINUTES):
            remaining = timedelta(minutes=BONUS_COOLDOWN_MINUTES) - (datetime.now() - last_time)
            minutes_left = int(remaining.total_seconds() // 60)
            seconds_left = int(remaining.total_seconds() % 60)
            await update.message.reply_text(
                f"‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫."
            )
            return

    # –í—ã–¥–∞—ë–º –±–æ–Ω—É—Å
    update_user_points(chat_id, user_id, BONUS_POINTS)
    set_last_bonus_time(chat_id, user_id)
    await update.message.reply_text(
        f"üéÅ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω! +{BONUS_POINTS} –æ—á–∫–æ–≤.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user_id)}"
    )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.from_user is None:
        return

    text = update.message.text.lower()
    if text == "!–±–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "!–¥—ç–ø":
        await dep(update, context)
    elif text == "!–±–æ–Ω—É—Å":
        await bonus(update, context)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
