import json
from pathlib import Path
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import asyncio
import uuid

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "832204"
DATA_FILE = Path("data.json")
CHANNEL_USERNAME = "@rewokayo"
START_POINTS = 1000
BONUS_POINTS = 1000
BONUS_COOLDOWN_MINUTES = 60

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ===
usernames_cache = {}
duels = {}  # duel_id -> {"chat_id": ..., "initiator_id": ..., "bet": ..., "message_id": ...}

# === –ó–ê–ì–†–£–ó–ö–ê / –°–û–•–†–ê–ù–ï–ù–ò–ï ===
if DATA_FILE.exists():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        users_data = json.load(f)
else:
    users_data = {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(users_data, f, ensure_ascii=False, indent=4)

def get_username_map():
    return users_data.setdefault("usernames", {})

def save_username(user, chat_id=None):
    if user.username:
        uname = user.username.lower()
        usernames_cache[uname] = user.id
        get_username_map()[uname] = user.id

    if chat_id:
        chat_data = users_data.setdefault(str(chat_id), {})
        points_data = chat_data.setdefault("points", {})
        if str(user.id) not in points_data:
            points_data[str(user.id)] = START_POINTS
    save_data()

def load_username_cache():
    usernames = users_data.get("usernames", {})
    usernames_cache.update(usernames)

load_username_cache()

# === –û–ß–ö–ò ===
def get_user_points(chat_id, user_id):
    return users_data.get(str(chat_id), {}).get("points", {}).get(str(user_id), START_POINTS)

def update_user_points(chat_id, user_id, points):
    chat_data = users_data.setdefault(str(chat_id), {})
    points_data = chat_data.setdefault("points", {})
    points_data[str(user_id)] = get_user_points(chat_id, user_id) + points
    save_data()

# === –ë–û–ù–£–°–´ ===
def get_last_bonus_time(chat_id, user_id):
    return users_data.get(str(chat_id), {}).get("bonus_time", {}).get(str(user_id))

def set_last_bonus_time(chat_id, user_id):
    chat_data = users_data.setdefault(str(chat_id), {})
    bonus_data = chat_data.setdefault("bonus_time", {})
    bonus_data[str(user_id)] = datetime.now().isoformat()
    save_data()

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def get_username_by_id(user_id):
    for uname, uid in usernames_cache.items():
        if uid == user_id:
            return uname
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "üí∞ !–±–∞–ª–∞–Ω—Å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "üé∞ !–¥—ç–ø <—Å—Ç–∞–≤–∫–∞> ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: !–¥—ç–ø 100)\n"
        "üéÅ !–±–æ–Ω—É—Å ‚Äî –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "üí∏ !–¥–∞—Ç—å @–ª–æ–≥–∏–Ω 100 ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—á–∫–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "‚öîÔ∏è !–¥—É—ç–ª—å <—Å—Ç–∞–≤–∫–∞> ‚Äî –≤—ã–∑–≤–∞—Ç—å –∫–æ–≥–æ-—Ç–æ –Ω–∞ –¥—É—ç–ª—å!\n"
        "üèÜ !—Ç–æ–ø ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—á–∫–∞–º"
    )

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)
    points = get_user_points(chat_id, user.id)
    await update.message.reply_text(f"–£ —Ç–µ–±—è {points} –æ—á–∫–æ–≤ üéØ")

async def dep(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)
    points = get_user_points(chat_id, user.id)

    args = update.message.text.strip().split()
    if len(args) > 1:
        try:
            bet = int(args[1])
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ !–¥—ç–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä: !–¥—ç–ø 100")
            return
    else:
        bet = 10

    if bet <= 0:
        await update.message.reply_text("üòí –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    if points < bet:
        await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet} üí∏. –ë–∞–ª–∞–Ω—Å: {points}")
        return

    update_user_points(chat_id, user.id, -bet)
    sent = await update.message.reply_dice(emoji="üé∞")
    await asyncio.sleep(2)
    dice_value = sent.dice.value

    multiplier = 0
    if dice_value in [1, 22, 43]:
        multiplier = 10
    elif dice_value == 64:
        multiplier = 100
    elif dice_value in [16, 32, 48]:
        multiplier = 5

    if multiplier > 0:
        reward = bet * multiplier
        update_user_points(chat_id, user.id, reward)
        await update.message.reply_text(
            f"üéâ –ó–∞–Ω–æ—Å! –ú–Ω–æ–∂–∏—Ç–µ–ª—å √ó{multiplier}, –≤—ã–∏–≥—Ä—ã—à {reward} –æ—á–∫–æ–≤!\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user.id)}"
        )
    else:
        await update.message.reply_text(
            f"üé∞ –ù–µ –ø–æ–≤–µ–∑–ª–æ... –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –æ—á–∫–æ–≤.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user.id)}"
        )

async def bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)

    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user.id)
        if member.status in ["left", "kicked"]:
            await update.message.reply_text(
                f"‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}. –ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!"
            )
            return
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞."
        )
        print("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", e)
        return

    last_bonus_time = get_last_bonus_time(chat_id, user.id)
    if last_bonus_time:
        last_time = datetime.fromisoformat(last_bonus_time)
        if datetime.now() - last_time < timedelta(minutes=BONUS_COOLDOWN_MINUTES):
            remaining = timedelta(minutes=BONUS_COOLDOWN_MINUTES) - (datetime.now() - last_time)
            minutes_left = int(remaining.total_seconds() // 60)
            seconds_left = int(remaining.total_seconds() % 60)
            await update.message.reply_text(
                f"‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫."
            )
            return

    update_user_points(chat_id, user.id, BONUS_POINTS)
    set_last_bonus_time(chat_id, user.id)
    await update.message.reply_text(
        f"üéÅ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω! +{BONUS_POINTS} –æ—á–∫–æ–≤.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user_points(chat_id, user.id)}"
    )

async def give(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)

    args = update.message.text.strip().split()
    if len(args) < 3:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: !–¥–∞—Ç—å @–ª–æ–≥–∏–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return

    username = args[1].lstrip("@").lower()
    try:
        amount = int(args[2])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    if username not in usernames_cache:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    target_id = usernames_cache[username]
    sender_points = get_user_points(chat_id, user.id)
    if amount > sender_points:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –ë–∞–ª–∞–Ω—Å: {sender_points}")
        return

    update_user_points(chat_id, user.id, -amount)
    update_user_points(chat_id, target_id, amount)
    await update.message.reply_text(f"üí∏ –¢—ã –ø–µ—Ä–µ–¥–∞–ª {amount} –æ—á–∫–æ–≤ @{username} ‚úÖ")

# === –†–ï–ô–¢–ò–ù–ì ===
async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    save_username(user, chat_id)

    chat_data = users_data.get(str(chat_id), {})
    points_data = chat_data.get("points", {})

    if not points_data:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    top = sorted(points_data.items(), key=lambda kv: kv[1], reverse=True)[:10]

    lines = ["üèÜ –¢–æ–ø –ø–æ –æ—á–∫–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ:"]
    for idx, (uid_str, pts) in enumerate(top, start=1):
        try:
            uid = int(uid_str)
        except ValueError:
            uid = uid_str
        uname = get_username_by_id(uid)
        display = f"@{uname}" if uname != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" else f"ID {uid_str}"
        lines.append(f"{idx}. {display} ‚Äî {pts}")

    await update.message.reply_text("\n".join(lines))

# === –î–£–≠–õ–¨ ===
async def duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    message_thread_id = update.message.message_thread_id if update.message.message_thread_id else None
    
    save_username(user, chat_id)

    args = update.message.text.strip().split()
    if len(args) < 2:
        await update.message.reply_text("‚öîÔ∏è –§–æ—Ä–º–∞—Ç: !–¥—É—ç–ª—å —Å—Ç–∞–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: !–¥—É—ç–ª—å 200)")
        return

    try:
        bet = int(args[1])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    if bet <= 0:
        await update.message.reply_text("üòí –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return

    points = get_user_points(chat_id, user.id)
    if points < bet:
        await update.message.reply_text(f"üí∏ –£ —Ç–µ–±—è –Ω–µ—Ç {bet} –æ—á–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–∏. –ë–∞–ª–∞–Ω—Å: {points}")
        return

    for duel_data in duels.values():
        if duel_data["chat_id"] == chat_id:
            await update.message.reply_text("‚ö†Ô∏è –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –¥—É—ç–ª—å.")
            return

    duel_id = str(uuid.uuid4())
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", callback_data=f"accept_duel:{duel_id}")]
    ])
    
    sent = await update.message.reply_text(
        f"üí• @{user.username} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å –Ω–∞ {bet} –æ—á–∫–æ–≤!\n–ö—Ç–æ –æ—Å–º–µ–ª–∏—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?",
        reply_markup=keyboard
    )

    duels[duel_id] = {
        "chat_id": chat_id,
        "initiator_id": user.id,
        "initiator_username": user.username,
        "bet": bet, 
        "message_id": sent.message_id,
        "message_thread_id": message_thread_id
    }

async def accept_duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    data = query.data

    try:
        duel_id = data.split(":")[1]
    except (IndexError, ValueError):
        await query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–∏.", show_alert=True)
        return

    duel = duels.get(duel_id)

    if not duel:
        await query.answer("–î—É—ç–ª—å —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        await query.edit_message_text("‚ùå –î—É—ç–ª—å —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    chat_id = duel["chat_id"]
    initiator_id = duel["initiator_id"]
    bet = duel["bet"]
    # –í–æ–∑—å–º—ë–º message_thread_id –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –¥—É—ç–ª–∏ (–µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å), –∏–Ω–∞—á–µ ‚Äî –∏–∑ callback-—Å–æ–æ–±—â–µ–Ω–∏—è
    message_thread_id = duel.get("message_thread_id") or getattr(query.message, "message_thread_id", None)

    if user.id == initiator_id:
        await query.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—é –∂–µ –¥—É—ç–ª—å.", show_alert=True)
        return

    await query.answer("–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! ‚öîÔ∏è")

    initiator_points = get_user_points(chat_id, initiator_id)
    acceptor_points = get_user_points(chat_id, user.id)

    if initiator_points < bet:
        await query.edit_message_text("‚ö†Ô∏è –£ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        duels.pop(duel_id, None)
        return

    if acceptor_points < bet:
        await query.edit_message_text("‚ö†Ô∏è –£ –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤. –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        duels.pop(duel_id, None)
        return

    update_user_points(chat_id, initiator_id, -bet)
    update_user_points(chat_id, user.id, -bet)

    await query.edit_message_text(
        f"‚öîÔ∏è –î—É—ç–ª—å –º–µ–∂–¥—É @{duel['initiator_username']} –∏ @{user.username} –Ω–∞—á–∞–ª–∞—Å—å!\n"
        f"–ö–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª {bet} –æ—á–∫–æ–≤!"
    )

    # ==== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ ====
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚Äî —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    from telegram.error import BadRequest

    dice_kwargs = {"chat_id": chat_id, "emoji": "üé≤"}
    if message_thread_id:
        dice_kwargs["message_thread_id"] = message_thread_id

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞ —Å –æ—Ç–∫–∞—Ç–æ–º, –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    try:
        sent1 = await context.bot.send_dice(**dice_kwargs)
    except BadRequest as e:
        # –µ—Å–ª–∏ —Ç–µ–º–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ–≤–µ—Ä–Ω–æ–π ‚Äî —É–±–∏—Ä–∞–µ–º –µ—ë –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –≤ –æ–±—â–∏–π —á–∞—Ç
        dice_kwargs.pop("message_thread_id", None)
        sent1 = await context.bot.send_dice(**dice_kwargs)

    await asyncio.sleep(3)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –±–µ–∑ message_thread_id –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ except)
    try:
        sent2 = await context.bot.send_dice(**dice_kwargs)
    except BadRequest as e:
        dice_kwargs.pop("message_thread_id", None)
        sent2 = await context.bot.send_dice(**dice_kwargs)

    roll1 = sent1.dice.value
    roll2 = sent2.dice.value
    await asyncio.sleep(3)
    # ==========================================

    if roll1 > roll2:
        winner_id = initiator_id
        winner_username = duel['initiator_username']
    elif roll2 > roll1:
        winner_id = user.id
        winner_username = user.username
    else:
        # –Ω–∏—á—å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏; –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ (—Å fallback)
        update_user_points(chat_id, initiator_id, bet)
        update_user_points(chat_id, user.id, bet)
        try:
            await context.bot.send_message(
                chat_id,
                "ü§ù –ù–∏—á—å—è! –û—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ–±–æ–∏–º.",
                message_thread_id=message_thread_id
            )
        except BadRequest:
            await context.bot.send_message(
                chat_id,
                "ü§ù –ù–∏—á—å—è! –û—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –æ–±–æ–∏–º."
            )
        duels.pop(duel_id, None)
        return

    prize = bet * 2
    update_user_points(chat_id, winner_id, prize)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ —Å —Ç–µ–º –∂–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñallback
    try:
        await context.bot.send_message(
            chat_id,
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏ ‚Äî @{winner_username}! –û–Ω –∑–∞–±–∏—Ä–∞–µ—Ç {prize} –æ—á–∫–æ–≤!\n",
            message_thread_id=message_thread_id
        )
    except BadRequest:
        await context.bot.send_message(
            chat_id,
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏ ‚Äî @{winner_username}! –û–Ω –∑–∞–±–∏—Ä–∞–µ—Ç {prize} –æ—á–∫–æ–≤!\n"
        )

    duels.pop(duel_id, None)


# === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    text = update.message.text.lower()
    if text.startswith("!–±–∞–ª–∞–Ω—Å"):
        await balance(update, context)
    elif text.startswith("!–¥—ç–ø"):
        await dep(update, context)
    elif text.startswith("!–±–æ–Ω—É—Å"):
        await bonus(update, context)
    elif text.startswith("!–¥–∞—Ç—å"):
        await give(update, context)
    elif text.startswith("!–¥—É—ç–ª—å"):
        await duel(update, context)
    elif text.startswith("!—Ç–æ–ø"):
        await leaderboard(update, context)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))
    app.add_handler(CallbackQueryHandler(accept_duel, pattern=r"^accept_duel:"))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)

